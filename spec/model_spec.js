// Generated by CoffeeScript 1.3.1
(function() {

  describe("HAL.Model", function() {
    beforeEach(function() {
      this.hal_response = Helper.model_response;
      return this.model = new HAL.Model(this.hal_response);
    });
    describe("when instantiated", function() {
      it("strips out the _links and _embedded properties", function() {
        return expect(this.model.get('_links') || this.model.get('_embedded')).toBeUndefined();
      });
      it("returns the correct URI from url() function", function() {
        return expect(this.model.url()).toEqual(this.hal_response._links.self.href);
      });
      it("sets links property of instance correctly", function() {
        return expect(this.model.links).toEqual(this.hal_response._links);
      });
      it("sets embedded property of instance correctly", function() {
        return expect(this.model.embedded).toEqual(this.hal_response._embedded);
      });
      it("sets normal properties up as expected", function() {
        return expect([this.model.get('prop'), this.model.get('other_prop')]).toEqual([this.hal_response.prop, this.hal_response.other_prop]);
      });
      return it("returns false for isNew when self-link present", function() {
        return expect(this.model.isNew()).toEqual(false);
      });
    });
    return describe("when reset with #fetch()", function() {
      beforeEach(function() {
        this.server = sinon.fakeServer.create();
        this.updated_response = Helper.updated_model_response;
        this.server.respondWith([
          200, {
            'Content-Type': 'application/hal+json'
          }, JSON.stringify(this.updated_response)
        ]);
        this.model.fetch();
        return this.server.respond();
      });
      afterEach(function() {
        return this.server.restore();
      });
      it("updates the links property correctly", function() {
        return expect(this.model.links).toEqual(this.updated_response._links);
      });
      it("updates the embedded property correctly", function() {
        return expect(this.model.embedded).toEqual(this.updated_response._embedded);
      });
      it("strips out _links and _embedded", function() {
        return expect(this.model.get('_embedded') || this.model.get('_links')).toBeUndefined();
      });
      return it("updates properties correctly", function() {
        return expect([this.model.get('prop'), this.model.get('other_prop'), this.model.get('additional')]).toEqual([this.updated_response.prop, this.updated_response.other_prop, this.updated_response.additional]);
      });
    });
  });

}).call(this);
